name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: weather-app-eks
      IMAGE_NAME: gogomaged/weather-app:latest
      TF_DIR: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Test EKS with kubectl
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces
        

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${{ github.run_number }}
          docker build -t $IMAGE_NAME-$IMAGE_TAG .
          docker push $IMAGE_NAME-$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update K8s manifests
        run: |
          sed -i "s|image: .*|image: $IMAGE_NAME-${IMAGE_TAG}|" k8s/deployment.yaml

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      # Fail-safe cleanup step
      - name: Destroy infra on failure
        if: ${{ failure() }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          echo "Something failed, destroying all infrastructure..."
          terraform destroy -auto-approve    
